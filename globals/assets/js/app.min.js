/*!Seton Hall University Gateway(Main) Web Site - Generated: 2016-11-28 @ 15:23:58*/ function activeCalendarEvents() {
	var eventImgSrc;
	"undefined" != typeof shu.AC &&
		$.ajax({
			url: "//events.shu.edu/Scripts/core.js",
			dataType: "script",
			success: function() {
				ActiveData.Events(
					"https://events.shu.edu/handlers/query.ashx?id=" +
						shu.AC[0].syndicationID +
						"&tenant=&site=",
					function(response) {
						$("#" + shu.AC[0].syndicationName).append(
							response.data
						),
							(eventImgSrc = $(
								"#" +
									shu.AC[0].syndicationName +
									" header a img"
							).attr("src")),
							"undefined" != typeof eventImgSrc &&
								((eventImgSrc =
									eventImgSrc.substring(
										0,
										eventImgSrc.indexOf("-thumb")
									) + ".jpg"),
								$(
									"#" +
										shu.AC[0].syndicationName +
										" header a img"
								).attr("src", eventImgSrc)),
							$(".event.post .text-holder a").each(function() {
								$(this).attr(
									"onclick",
									"dataLayer.push({'event':'Events','eventCategory':'Events','eventLabel':'" +
										$(this).html() +
										"','eventAction':'click'});"
								);
							});
					}
				);
			}
		});
}
function initFixedScrollBlock() {
	$("#wrapper").fixedScrollBlock({
		slideBlock: ".programms",
		positionType: "fixed"
	});
}
function initAnchors() {
	new SmoothScroll({ anchorLinks: "a.btn-top" });
}
function initSameHeight() {
	$(".posts-holder").length > 0 &&
		$(".posts-holder").sameHeight({
			elements: ".post",
			flexible: !0,
			multiLine: !0
		}),
		$(".gray-box").length > 0 &&
			$(".gray-box").sameHeight({
				elements: ".year-box",
				flexible: !0,
				multiLine: !0
			}),
		$(".gray-box").length > 0 &&
			$(".gray-box").sameHeight({
				elements: ".person-box",
				flexible: !0,
				multiLine: !0
			}),
		$(".mega-drop").length > 0 &&
			$(".mega-drop").sameHeight({ elements: ".columns", flexible: !0 }),
		$(".gray-box").length > 0 &&
			$(".gray-box").sameHeight({
				elements: ".columns",
				flexible: !0,
				multiLine: !0
			});
}
function initTouchNav() {
	$("#nav").each(function() {
		new TouchNav({ navBlock: this, menuDrop: ".menu1-drop" });
	}),
		$(".univertsity-menu").each(function() {
			new TouchNav({ navBlock: this, menuDrop: "drop" });
		}),
		$("#nav").each(function() {
			new TouchNav({ navBlock: this, menuDrop: ".mega-drop" });
		}),
		$(".mobile-menu").each(function() {
			new TouchNav({ navBlock: this, menuDrop: ".drop" });
		});
}
function initGatewaySlideShow() {
	$(".single-item").length > 0 &&
		$(".single-item").slick({
			autoplay: !0,
			autoplaySpeed: 5e3,
			dots: !0,
			draggable: !1,
			fade: !0,
			infinite: !0
		});
}
function initNewsTwitterSlider() {
	$(".news-twitter").length > 0 &&
		$(".news-twitter").slick({
			autoplay: !0,
			autoplaySpeed: 5e3,
			dots: !1,
			draggable: !1,
			fade: !0,
			infinite: !0
		});
}
function initGenericSlideshow() {
	$(".slider").length > 0 &&
		$(".slider").slick({
			autoplay: !0,
			autoplaySpeed: 5e3,
			dots: !1,
			draggable: !1,
			fade: !1,
			infinite: !0
		});
}
function useDataTable(pointerToTable) {
	$(document).ready(function() {
		$("#" + pointerToTable).dataTable({
			bJQueryUI: !1,
			bSort: !1,
			bAutoWidth: !1,
			bProcessing: !0,
			bLengthChange: !1,
			sPaginationType: "full_numbers",
			oLanguage: {
				sSearch:
					'<h5><span class="filter-box-label"></span>  _INPUT_</h5>',
				searchPlaceholder: "Search..."
			},
			aoColumns: [{ bVisible: !1 }, { sWidth: "538px" }],
			asStripeClasses: ["o", "e"],
			iDisplayLength: 10
		});
	}),
		$(".tablesorter").css("display", "none"),
		$(".filter-box-label input").attr(
			"placeholder",
			"Search by Department Name"
		);
}
function initFixedScrollBlock() {
	jQuery("#wrapper").fixedScrollBlock({
		slideBlock: ".programs",
		positionType: "fixed"
	});
}
function initAnchors() {
	new SmoothScroll({ anchorLinks: "a.btn-top" });
}
function initInputs() {
	PlaceholderInput.replaceByOptions({
		clearInputs: !0,
		clearTextareas: !0,
		clearPasswords: !0,
		skipClass: "default",
		wrapWithElement: !1,
		showUntilTyping: !1,
		getParentByClass: !1,
		placeholderAttr: "value"
	});
}
function getURLParams() {
	var URLString = decodeURIComponent(window.location.href),
		qsBegin = URLString.indexOf("?") + 1,
		fieldName = URLString.substring(qsBegin, URLString.indexOf("=")),
		fieldValue = URLString.substring(
			URLString.indexOf("=") + 1,
			URLString.length
		);
	populateFormField(fieldName, fieldValue);
}
function populateFormField(fieldName, fieldValue) {
	$(document).ready(function() {
		$("#" + fieldName).val(fieldValue);
	});
}
function getActiveDataCalendar() {
	if ("undefined" != typeof shu.adxEvents)
		for (var i = 0; i < shu.adxEvents.length; i++)
			$.ajax({
				type: "GET",
				url: shu.adxEvents[i].adxURL,
				dataType: "script",
				success: function(result) {}
			});
}
function googleTranslateElementInit() {
	new google.translate.TranslateElement(
		{
			pageLanguage: "en",
			layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
			gaTrack: !0,
			gaId: "UA-18560888-1"
		},
		"google-translate-element"
	);
}
function loadFacebook() {
	facebookActive === !0 &&
		$.ajax({
			type: "GET",
			url:
				"/customcf/com/facebook-component.cfc?method=retrieveFacebookData&returnFormat=JSON",
			dataType: "text",
			success: function(data) {
				var response = JSON.parse(data);
				"success" === response.RESULT &&
					($(".facebook > .visual").css({
						"background-image":
							"linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(" +
							response.ATTACHMENT +
							")"
					}),
					"undefined" != typeof response.MESSAGE &&
						$(".facebook > .visual > .text p").html(
							response.MESSAGE +
								' <a href="' +
								response.READ_MORE +
								'" target="_blank">Read More...</a></p>'
						));
			},
			error: function(jqXHR, textStatus, errorThrown) {}
		});
}
function loadTwitter() {
	staticTwitterActive === !0 &&
		$.ajax({
			type: "GET",
			dataType: "JSON",
			url:
				"/customcf/com/twitter.cfc?method=getTweets&count=1&returnFormat=JSON",
			success: function(data) {},
			error: function(jqXHR, textStatus, errorThrown) {}
		});
}
function TouchNav(opt) {
	this.options = {
		hoverClass: "hover",
		menuItems: "li",
		menuOpener: "a",
		menuDrop: "ul",
		navBlock: null
	};
	for (var p in opt) opt.hasOwnProperty(p) && (this.options[p] = opt[p]);
	this.init();
}
function createTableRows(tableID, numRows) {
	for (var i = 0; i < numRows; i++)
		$("#" + tableID).append(
			'<tr class="classrow"><td><input class="coursename" type="text" /></td><td><input class="credithours" type="number" min="1" max="6" /></td><td><select class="lettergrade"><option value="4.0">A</option><option value="3.667">A-</option><option value="3.333">B+</option><option value="3.0">B</option><option value="2.667">B-</option><option value="2.333">C+</option><option value="2.0">C</option><option value="1.667">C-</option><option value="1.33">D+</option><option value="1.0">D</option><option value="0.0">F</option></select></td></tr>'
		);
}
function computeGradePoints(numRows) {
	var credits = 0,
		gradePoints = 0,
		totalGP = 0;
	numRows = 0;
	for (
		var k = 0;
		k < $(".credithours").length &&
		"" !==
			$(".credithours")
				.eq(k)
				.val();
		k++
	)
		numRows++;
	for (var j = 0; j < numRows; j++)
		(credits = parseInt(
			$(".credithours")
				.eq(j)
				.val()
		)),
			(gradePoints = parseFloat(
				$(".lettergrade")
					.eq(j)
					.val()
			)),
			(totalGP += credits * gradePoints);
	return (shu.numCalcRows = numRows), totalGP;
}
function computeGPA(gradePoints, numRows) {
	for (var credits = 0, j = 0; j < numRows; j++)
		credits += parseInt(
			$(".credithours")
				.eq(j)
				.val()
		);
	return gradePoints / credits;
}
function addTableRow(tableID) {
	createTableRows(shu.calculatorTableID, 1), shu.numCalcRows++;
}
function removeTableRow(tableID) {
	$("#" + tableID + " tr")
		.last()
		.remove(),
		shu.numCalcRows--;
}
function useDashboardDataTable(dtTableId, columnDefs) {
	var dtParamsObj = {};
	(dtParamsObj.config = {}),
		(dtParamsObj.config.columnDefs = columnDefs),
		(dtParamsObj.pagingType = "full_numbers"),
		(dtParamsObj.pageLength = 10),
		(dtParamsObj.lengthChange = !1),
		$("#" + dtTableId).dataTable(dtParamsObj);
}
function useUnitsDataTable(dtTableId) {
	var dtParamsObj = {
		config: { columnDefs: [{ visible: !1 }, { width: "538px" }] },
		pagelength: 10,
		processing: !0,
		jQueryUI: !1,
		ordering: !1,
		autoWidth: !1,
		paging: !0,
		lengthChange: !1,
		language: {
			search: "_INPUT_",
			searchPlaceholder: "Search by Department Name"
		}
	};
	$("#" + dtTableId).dataTable(dtParamsObj),
		$(".dataTables_info").css("display", "none"),
		$(".dataTables_paginate").css("display", "none"),
		$(".tablesorter").css({ display: "none" }),
		$(".dataTables_filter input").bind(
			"change paste keyup keydown",
			function() {
				$(".dataTables_filter input").val().length > 0
					? ($(".tablesorter").css("display", "table"),
					  $(".dataTables_info").css("display", "block"),
					  $(".dataTables_paginate").css("display", "block"))
					: ($(".tablesorter").css("display", "none"),
					  $(".dataTables_info").css("display", "none"),
					  $(".dataTables_paginate").css("display", "none"));
			}
		);
}
1 == shu.addToCalendar &&
	($("head").append(
		'<link href="https://addtocalendar.com/atc/1.5/atc-style-' +
			shu.addToCalendarStyle +
			'.css" rel="stylesheet" type="text/css">'
	),
	(function() {
		if (
			(!window.addtocalendar ||
				"function" != typeof window.addtocalendar.start) &&
			void 0 == window.ifaddtocalendar
		) {
			window.ifaddtocalendar = 1;
			var d = document,
				s = d.createElement("script"),
				g = "getElementsByTagName";
			(s.type = "text/javascript"),
				(s.charset = "UTF-8"),
				(s.async = !0),
				(s.src =
					("https:" == window.location.protocol ? "https" : "http") +
					"://addtocalendar.com/atc/1.5/atc.min.js");
			var h = d[g]("body")[0];
			h.appendChild(s);
		}
	})());
var socialMediaRetrieved = !1;
$(document).foundation(),
	$(document).ready(function() {
		initGatewaySlideShow(),
			initGenericSlideshow(),
			initAnchors(),
			initTouchNav(),
			initSameHeight(),
			initFixedScrollBlock(),
			initNewsTwitterSlider(),
			"undefined" == typeof shu && (shu = {}),
			"undefined" != typeof shu &&
				"undefined" != typeof shu.adxEvents &&
				getActiveDataCalendar(),
			$(document).foundation("off-canvas", "reflow"),
			$(document).foundation("reflow"),
			$(".visual").height($(".visual").width()),
			(searchReady = setInterval(function() {
				$(".gsc-search-button").length > 0 &&
					($("#gsc-i-id2").attr("placeholder", "Search"),
					$(".gsc-search-button").attr("value", ""),
					clearTimeout(searchReady));
			}, 300)),
			$("table[id^=dashboard]").length > 0 &&
				useDashboardDataTable(dtTableId, columnDefs),
			$("table[id^=units]").length > 0 &&
				useUnitsDataTable($("table[id^=units]").attr("id")),
			activeCalendarEvents(),
			shu.isSHMSCalcPage &&
				(createTableRows(shu.calculatorTableID, shu.numCalcRows),
				$("#calculate").click(function() {
					$("#total-grade-points").html(
						computeGradePoints(shu.numCalcRows).toFixed(1)
					),
						$("#total-gpa").html(
							computeGPA(
								computeGradePoints(shu.numCalcRows),
								shu.numCalcRows
							).toFixed(1)
						);
				}),
				$("#add-row").click(function() {
					addTableRow(shu.calculatorTableID);
				}),
				$("#remove-row").click(function() {
					shu.numCalcRows > 1 &&
						removeTableRow(shu.calculatorTableID);
				}),
				$("#clear").click(function() {
					$(".classrow").remove(),
						(shu.numCalcRows = 4),
						createTableRows(shu.calculatorTableID, shu.numCalcRows),
						$("#total-grade-points").html("Total Credit Hours: 0"),
						$("#total-gpa").html("0.0");
				})),
			$("#social-media-dashboard").length &&
				($("#resetfacebook")
					.unbind("click")
					.click(function(e) {
						e.preventDefault(),
							$('<p class="blink">Resetting...</p>').insertBefore(
								$("#fbdata")
							),
							$("#fbdata tbody tr td").css({
								"background-color": "#c30000",
								color: "#c30000"
							}),
							$.ajax(
								"http://site8.auth.dev.shu.commonspotcloud.com/customcf/com/social-media-dashboard.cfc?method=clearFacebook"
							).done(function(data) {
								$(
									'<section class="emergency"><p>Data has been cleared</p></section><p class="blink">Refreshing...</p>'
								).insertBefore($("#fbdata")),
									$("#fbdata").remove(),
									setTimeout(function() {
										location.reload();
									}, 3e3);
							});
					}),
				$("#resettwitter")
					.unbind("click")
					.click(function(e) {
						e.preventDefault(),
							$('<p class="blink">Resetting...</p>').insertBefore(
								$("#twitterdata")
							),
							$("#twitterdata tbody tr td").css({
								"background-color": "#c30000",
								color: "#c30000"
							}),
							$.ajax(
								"http://site8.auth.dev.shu.commonspotcloud.com/customcf/com/social-media-dashboard.cfc?method=clearTwitter"
							).done(function(data) {
								$(
									'<section class="emergency"><p>Data has been cleared</p></section><p class="blink">Refreshing...</p>'
								).insertBefore($("#twitterdata")),
									$("#twitterdata").remove(),
									setTimeout(function() {
										location.reload();
									}, 3e3);
							});
					}));
	}),
	(function($, window) {
		"use strict";
		function FixedScrollBlock(options) {
			(this.options = $.extend(
				{
					fixedActiveClass: "fixed-position",
					slideBlock: "[data-scroll-block]",
					positionType: "auto",
					fixedOnlyIfFits: !0,
					container: null,
					animDelay: 100,
					animSpeed: 200,
					extraBottom: 0,
					extraTop: 0
				},
				options
			)),
				this.initStructure(),
				this.attachEvents();
		}
		var isMobileDevice =
			"ontouchstart" in window ||
			(window.DocumentTouch && document instanceof DocumentTouch) ||
			/Windows Phone/.test(navigator.userAgent);
		(FixedScrollBlock.prototype = {
			initStructure: function() {
				(this.win = $(window)),
					(this.container = $(this.options.container)),
					(this.slideBlock = this.container.find(
						this.options.slideBlock
					)),
					"auto" === this.options.positionType &&
						(this.options.positionType = isMobileDevice
							? "absolute"
							: "fixed");
			},
			attachEvents: function() {
				var self = this;
				(this.onResize = function() {
					self.resizeHandler();
				}),
					(this.onScroll = function() {
						self.scrollHandler();
					}),
					this.win.on({
						resize: this.onResize,
						scroll: this.onScroll
					}),
					this.resizeHandler();
			},
			recalculateOffsets: function() {
				var defaultOffset = this.slideBlock.offset(),
					defaultPosition = this.slideBlock.position(),
					holderOffset = this.container.offset();
				this.win.height();
				this.data = {
					windowHeight: this.win.height(),
					windowWidth: this.win.width(),
					blockPositionLeft: defaultPosition.left,
					blockPositionTop: defaultPosition.top,
					blockOffsetLeft: defaultOffset.left,
					blockOffsetTop: defaultOffset.top,
					blockHeight: this.slideBlock.innerHeight(),
					holderOffsetLeft: holderOffset.left,
					holderOffsetTop: holderOffset.top,
					holderHeight: this.container.innerHeight()
				};
			},
			isVisible: function() {
				return this.slideBlock.prop("offsetHeight");
			},
			fitsInViewport: function() {
				return (
					!this.options.fixedOnlyIfFits ||
					!this.data ||
					this.data.blockHeight + this.options.extraTop <=
						this.data.windowHeight
				);
			},
			resizeHandler: function() {
				this.isVisible() &&
					(FixedScrollBlock.stickyMethods[
						this.options.positionType
					].onResize.apply(this, arguments),
					this.scrollHandler());
			},
			scrollHandler: function() {
				if (this.isVisible()) {
					if (!this.data) return void this.resizeHandler();
					(this.currentScrollTop = this.win.scrollTop()),
						(this.currentScrollLeft = this.win.scrollLeft()),
						FixedScrollBlock.stickyMethods[
							this.options.positionType
						].onScroll.apply(this, arguments);
				}
			},
			refresh: function() {
				this.data &&
					((this.data.holderHeight = this.container.innerHeight()),
					(this.data.blockHeight = this.slideBlock.innerHeight()),
					this.scrollHandler());
			},
			destroy: function() {
				this.slideBlock
					.removeAttr("style")
					.removeClass(this.options.fixedActiveClass),
					this.win.off({
						resize: this.onResize,
						scroll: this.onScroll
					});
			}
		}),
			(FixedScrollBlock.stickyMethods = {
				fixed: {
					onResize: function() {
						this.slideBlock.removeAttr("style"),
							this.recalculateOffsets();
					},
					onScroll: function() {
						this.fitsInViewport() &&
						this.currentScrollTop + this.options.extraTop >
							this.data.blockOffsetTop
							? (this.currentScrollTop +
									this.options.extraTop +
									this.data.blockHeight >
							  this.data.holderOffsetTop +
									this.data.holderHeight -
									this.options.extraBottom
									? this.slideBlock.css({
											position: "absolute",
											top:
												this.data.blockPositionTop +
												this.data.holderHeight -
												this.data.blockHeight -
												this.options.extraBottom -
												(this.data.blockOffsetTop -
													this.data.holderOffsetTop),
											left: this.data.blockPositionLeft
									  })
									: this.slideBlock.css({
											position: "fixed",
											top: this.options.extraTop,
											left:
												this.data.blockOffsetLeft -
												this.currentScrollLeft
									  }),
							  this.slideBlock.addClass(
									this.options.fixedActiveClass
							  ))
							: this.slideBlock
									.removeClass(this.options.fixedActiveClass)
									.removeAttr("style");
					}
				},
				absolute: {
					onResize: function() {
						this.slideBlock.removeAttr("style"),
							this.recalculateOffsets(),
							this.slideBlock.css({
								position: "absolute",
								top: this.data.blockPositionTop,
								left: this.data.blockPositionLeft
							}),
							this.slideBlock.addClass(
								this.options.fixedActiveClass
							);
					},
					onScroll: function() {
						var self = this;
						clearTimeout(this.animTimer),
							(this.animTimer = setTimeout(function() {
								var currentScrollTop =
										self.currentScrollTop +
										self.options.extraTop,
									initialPosition =
										self.data.blockPositionTop -
										(self.data.blockOffsetTop -
											self.data.holderOffsetTop),
									maxTopPosition =
										self.data.holderHeight -
										self.data.blockHeight -
										self.options.extraBottom,
									currentTopPosition =
										initialPosition +
										Math.min(
											currentScrollTop -
												self.data.holderOffsetTop,
											maxTopPosition
										),
									calcTopPosition =
										self.fitsInViewport() &&
										currentScrollTop >
											self.data.blockOffsetTop
											? currentTopPosition
											: self.data.blockPositionTop;
								self.slideBlock
									.stop()
									.animate(
										{ top: calcTopPosition },
										self.options.animSpeed
									);
							}, this.options.animDelay));
					}
				}
			}),
			($.fn.fixedScrollBlock = function(options) {
				return this.each(function() {
					var params = $.extend({}, options, { container: this }),
						instance = new FixedScrollBlock(params);
					$.data(this, "FixedScrollBlock", instance);
				});
			}),
			(window.FixedScrollBlock = FixedScrollBlock);
	})(jQuery, this),
	(function() {
		var cx = "017792754489858269534:canhcdgi9di",
			gcse = document.createElement("script"),
			s = document.getElementsByTagName("script")[0];
		(gcse.type = "text/javascript"),
			(gcse.async = !0),
			(gcse.src =
				("https:" == document.location.protocol ? "https:" : "http:") +
				"//cse.google.com/cse.js?cx=" +
				cx),
			s.parentNode.insertBefore(gcse, s);
	})(),
	(function($) {
		function resizeElementsByRows(boxes, options) {
			var maxHeight,
				currentRow = $(),
				maxCalcHeight = 0,
				firstOffset = boxes.eq(0).offset().top;
			boxes.each(function(ind) {
				var curItem = $(this);
				curItem.offset().top === firstOffset
					? (currentRow = currentRow.add(this))
					: ((maxHeight = getMaxHeight(currentRow)),
					  (maxCalcHeight = Math.max(
							maxCalcHeight,
							resizeElements(currentRow, maxHeight, options)
					  )),
					  (currentRow = curItem),
					  (firstOffset = curItem.offset().top));
			}),
				currentRow.length &&
					((maxHeight = getMaxHeight(currentRow)),
					(maxCalcHeight = Math.max(
						maxCalcHeight,
						resizeElements(currentRow, maxHeight, options)
					))),
				options.biggestHeight &&
					boxes.css(
						options.useMinHeight && supportMinHeight
							? "minHeight"
							: "height",
						maxCalcHeight
					);
		}
		function getMaxHeight(boxes) {
			var maxHeight = 0;
			return (
				boxes.each(function() {
					maxHeight = Math.max(maxHeight, $(this).outerHeight());
				}),
				maxHeight
			);
		}
		function resizeElements(boxes, parent, options) {
			var calcHeight,
				parentHeight =
					"number" == typeof parent ? parent : parent.height();
			return (
				boxes
					.removeClass(options.leftEdgeClass)
					.removeClass(options.rightEdgeClass)
					.each(function(i) {
						var element = $(this),
							depthDiffHeight = 0,
							isBorderBox =
								"border-box" === element.css("boxSizing") ||
								"border-box" ===
									element.css("-moz-box-sizing") ||
								"border-box" ===
									element.css("-webkit-box-sizing");
						"number" != typeof parent &&
							element.parents().each(function() {
								var tmpParent = $(this);
								return (
									!parent.is(this) &&
									void (depthDiffHeight +=
										tmpParent.outerHeight() -
										tmpParent.height())
								);
							}),
							(calcHeight = parentHeight - depthDiffHeight),
							(calcHeight -= isBorderBox
								? 0
								: element.outerHeight() - element.height()),
							calcHeight > 0 &&
								element.css(
									options.useMinHeight && supportMinHeight
										? "minHeight"
										: "height",
									calcHeight
								);
					}),
				boxes.filter(":first").addClass(options.leftEdgeClass),
				boxes.filter(":last").addClass(options.rightEdgeClass),
				calcHeight
			);
		}
		$.fn.sameHeight = function(opt) {
			var options = $.extend(
				{
					skipClass: "same-height-ignore",
					leftEdgeClass: "same-height-left",
					rightEdgeClass: "same-height-right",
					elements: ">*",
					flexible: !1,
					multiLine: !1,
					useMinHeight: !1,
					biggestHeight: !1
				},
				opt
			);
			return this.each(function() {
				function doResize() {
					elements.css(
						options.useMinHeight && supportMinHeight
							? "minHeight"
							: "height",
						""
					),
						options.multiLine
							? resizeElementsByRows(elements, options)
							: resizeElements(elements, holder, options);
				}
				var postResizeTimer,
					ignoreResize,
					holder = $(this),
					elements = holder
						.find(options.elements)
						.not("." + options.skipClass);
				if (elements.length) {
					doResize();
					var delayedResizeHandler = function() {
						ignoreResize ||
							((ignoreResize = !0),
							doResize(),
							clearTimeout(postResizeTimer),
							(postResizeTimer = setTimeout(function() {
								doResize(),
									setTimeout(function() {
										ignoreResize = !1;
									}, 10);
							}, 100)));
					};
					options.flexible &&
						$(window).bind(
							"resize orientationchange fontresize",
							delayedResizeHandler
						),
						$(window).bind("load", delayedResizeHandler);
				}
			});
		};
		var supportMinHeight =
			"undefined" != typeof document.documentElement.style.maxHeight;
	})(jQuery),
	(function($, exports) {
		function scrollTo(offset, options, callback) {
			var scrollBlock;
			document.body &&
				((options =
					"number" == typeof options
						? { duration: options }
						: options || {}),
				(page = page || $("html, body")),
				(scrollBlock = options.container || page),
				"number" == typeof offset && (offset = { top: offset }),
				activeBlock &&
					activeWheelHandler &&
					activeBlock.off("mousewheel", activeWheelHandler),
				options.wheelBehavior &&
					"none" !== options.wheelBehavior &&
					((activeWheelHandler = function(e) {
						"stop" === options.wheelBehavior
							? (scrollBlock.off(
									"mousewheel",
									activeWheelHandler
							  ),
							  scrollBlock.stop())
							: "ignore" === options.wheelBehavior &&
							  e.preventDefault();
					}),
					(activeBlock = scrollBlock.on(
						"mousewheel",
						activeWheelHandler
					))),
				scrollBlock
					.stop()
					.animate(
						{ scrollLeft: offset.left, scrollTop: offset.top },
						options.duration,
						function() {
							activeWheelHandler &&
								scrollBlock.off(
									"mousewheel",
									activeWheelHandler
								),
								$.isFunction(callback) && callback();
						}
					));
		}
		function SmoothScroll(options) {
			(this.options = $.extend(
				{
					anchorLinks: 'a[href^="#"]',
					container: null,
					extraOffset: null,
					activeClasses: null,
					easing: "swing",
					animMode: "duration",
					animDuration: 800,
					animSpeed: 1500,
					anchorActiveClass: "anchor-active",
					sectionActiveClass: "section-active",
					wheelBehavior: "stop",
					useNativeAnchorScrolling: !1
				},
				options
			)),
				this.init();
		}
		var page,
			activeBlock,
			activeWheelHandler,
			win = $(window);
		"onwheel" in document || document.documentMode >= 9
			? "wheel"
			: "mousewheel DOMMouseScroll";
		(SmoothScroll.prototype = {
			init: function() {
				this.initStructure(), this.attachEvents();
			},
			initStructure: function(options) {
				(this.container = $(
					this.options.container
						? this.options.container
						: "html,body"
				)),
					(this.scrollContainer = this.options.container
						? this.container
						: win),
					(this.anchorLinks = $(this.options.anchorLinks));
			},
			getAnchorTarget: function(link) {
				var targetId = $(link).attr("href");
				return $(targetId.length > 1 ? targetId : "html");
			},
			getTargetOffset: function(block) {
				var blockOffset = block.offset().top;
				return (
					this.options.container &&
						(blockOffset -=
							this.container.offset().top -
							this.container.prop("scrollTop")),
					"number" == typeof this.options.extraOffset
						? (blockOffset -= this.options.extraOffset)
						: "function" == typeof this.options.extraOffset &&
						  (blockOffset -= this.options.extraOffset(block)),
					{ top: blockOffset }
				);
			},
			attachEvents: function() {
				var self = this;
				this.options.activeClasses &&
					((this.anchorData = []),
					this.anchorLinks.each(function() {
						var anchorDataItem,
							link = jQuery(this),
							targetBlock = self.getAnchorTarget(link);
						$.each(self.anchorData, function(index, item) {
							item.block[0] === targetBlock[0] &&
								(anchorDataItem = item);
						}),
							anchorDataItem
								? (anchorDataItem.link = anchorDataItem.link.add(
										link
								  ))
								: self.anchorData.push({
										link: link,
										block: targetBlock
								  });
					}),
					(this.resizeHandler = function() {
						self.recalculateOffsets();
					}),
					(this.scrollHandler = function() {
						self.refreshActiveClass();
					}),
					this.recalculateOffsets(),
					this.scrollContainer.on("scroll", this.scrollHandler),
					win.on("resize", this.resizeHandler)),
					(this.clickHandler = function(e) {
						self.onClick(e);
					}),
					this.options.useNativeAnchorScrolling ||
						this.anchorLinks.on("click", this.clickHandler);
			},
			recalculateOffsets: function() {
				var self = this;
				$.each(this.anchorData, function(index, data) {
					(data.offset = self.getTargetOffset(data.block)),
						(data.height = data.block.outerHeight());
				}),
					this.refreshActiveClass();
			},
			refreshActiveClass: function() {
				function toggleActiveClass(anchor, block, state) {
					anchor.toggleClass(self.options.anchorActiveClass, state),
						block.toggleClass(
							self.options.sectionActiveClass,
							state
						);
				}
				var self = this,
					foundFlag = !1,
					containerHeight =
						(win.height(), this.container.prop("scrollHeight")),
					viewPortHeight = this.scrollContainer.height(),
					scrollTop = this.options.container
						? this.container.prop("scrollTop")
						: win.scrollTop();
				return this.options.customScrollHandler
					? void this.options.customScrollHandler.call(
							this,
							scrollTop,
							this.anchorData
					  )
					: (this.anchorData.sort(function(a, b) {
							return a.offset.top - b.offset.top;
					  }),
					  void $.each(this.anchorData, function(index) {
							var reverseIndex =
									self.anchorData.length - index - 1,
								data = self.anchorData[reverseIndex],
								anchorElement =
									"parent" === self.options.activeClasses
										? data.link.parent()
										: data.link;
							scrollTop >= containerHeight - viewPortHeight
								? reverseIndex === self.anchorData.length - 1
									? toggleActiveClass(
											anchorElement,
											data.block,
											!0
									  )
									: toggleActiveClass(
											anchorElement,
											data.block,
											!1
									  )
								: !foundFlag &&
								  (scrollTop >= data.offset.top - 1 ||
										0 === reverseIndex)
								? ((foundFlag = !0),
								  toggleActiveClass(
										anchorElement,
										data.block,
										!0
								  ))
								: toggleActiveClass(
										anchorElement,
										data.block,
										!1
								  );
					  }));
			},
			calculateScrollDuration: function(offset) {
				var distance;
				return "speed" === this.options.animMode
					? ((distance = Math.abs(
							this.scrollContainer.scrollTop() - offset.top
					  )),
					  (distance / this.options.animSpeed) * 1e3)
					: this.options.animDuration;
			},
			onClick: function(e) {
				var targetBlock = this.getAnchorTarget(e.currentTarget),
					targetOffset = this.getTargetOffset(targetBlock);
				e.preventDefault(),
					scrollTo(targetOffset, {
						container: this.container,
						wheelBehavior: this.options.wheelBehavior,
						duration: this.calculateScrollDuration(targetOffset)
					});
			},
			destroy: function() {
				this.options.activeClasses &&
					(win.off("resize", this.resizeHandler),
					this.scrollContainer.off("scroll", this.scrollHandler)),
					this.anchorLinks.off("click", this.clickHandler);
			}
		}),
			$.extend(SmoothScroll, {
				scrollTo: function(blockOrOffset, durationOrOptions, callback) {
					scrollTo(blockOrOffset, durationOrOptions, callback);
				}
			}),
			(exports.SmoothScroll = SmoothScroll);
	})(jQuery, this),
	(TouchNav.isActiveOn = function(elem) {
		return elem && elem.touchNavActive;
	}),
	(TouchNav.prototype = {
		init: function() {
			"string" == typeof this.options.navBlock
				? (this.menu = document.getElementById(this.options.navBlock))
				: "object" == typeof this.options.navBlock &&
				  (this.menu = this.options.navBlock),
				this.menu && this.addEvents();
		},
		addEvents: function() {
			var self = this,
				touchEvent =
					(navigator.pointerEnabled && "pointerdown") ||
					(navigator.msPointerEnabled && "MSPointerDown") ||
					(this.isTouchDevice && "touchstart");
			this.menuItems = lib.queryElementsBySelector(
				this.options.menuItems,
				this.menu
			);
			for (
				var initMenuItem = function(item) {
						var currentDrop = lib.queryElementsBySelector(
								self.options.menuDrop,
								item
							)[0],
							currentOpener = lib.queryElementsBySelector(
								self.options.menuOpener,
								item
							)[0];
						currentDrop &&
							currentOpener &&
							(self.isTouchDevice || self.isPointerDevice) &&
							(lib.event.add(
								currentOpener,
								"click",
								lib.bind(self.clickHandler, self)
							),
							lib.event.add(
								currentOpener,
								"mousedown",
								lib.bind(self.mousedownHandler, self)
							),
							lib.event.add(currentOpener, touchEvent, function(
								e
							) {
								return self.isTouchPointerEvent(e)
									? ((self.touchFlag = !0),
									  (self.currentItem = item),
									  (self.currentLink = currentOpener),
									  void self.pressHandler.apply(
											self,
											arguments
									  ))
									: void (self.preventCurrentClick = !1);
							})),
							jQuery(item).bind("mouseenter", function() {
								self.touchFlag ||
									((self.currentItem = item),
									self.mouseoverHandler());
							}),
							jQuery(item).bind("mouseleave", function() {
								self.touchFlag ||
									((self.currentItem = item),
									self.mouseoutHandler());
							}),
							(item.touchNavActive = !0);
					},
					i = 0;
				i < this.menuItems.length;
				i++
			)
				initMenuItem(self.menuItems[i]);
			(this.isTouchDevice || this.isPointerDevice) &&
				(lib.event.add(
					document.documentElement,
					"mousedown",
					lib.bind(this.clickOutsideHandler, this)
				),
				lib.event.add(
					document.documentElement,
					touchEvent,
					lib.bind(this.clickOutsideHandler, this)
				));
		},
		mousedownHandler: function(e) {
			this.touchFlag &&
				(e.preventDefault(),
				(this.touchFlag = !1),
				(this.preventCurrentClick = !1));
		},
		mouseoverHandler: function() {
			lib.addClass(this.currentItem, this.options.hoverClass),
				jQuery(this.currentItem).trigger("itemhover");
		},
		mouseoutHandler: function() {
			lib.removeClass(this.currentItem, this.options.hoverClass),
				jQuery(this.currentItem).trigger("itemleave");
		},
		hideActiveDropdown: function() {
			for (var i = 0; i < this.menuItems.length; i++)
				lib.hasClass(this.menuItems[i], this.options.hoverClass) &&
					(lib.removeClass(
						this.menuItems[i],
						this.options.hoverClass
					),
					jQuery(this.menuItems[i]).trigger("itemleave"));
			this.activeParent = null;
		},
		pressHandler: function(e) {
			this.currentItem !== this.activeParent &&
				(this.activeParent &&
				this.currentItem.parentNode === this.activeParent.parentNode
					? lib.removeClass(
							this.activeParent,
							this.options.hoverClass
					  )
					: this.isParent(this.activeParent, this.currentLink) ||
					  this.hideActiveDropdown()),
				(this.activeParent = this.currentItem),
				lib.hasClass(this.currentItem, this.options.hoverClass)
					? (this.preventCurrentClick = !1)
					: (e.preventDefault(),
					  (this.preventCurrentClick = !0),
					  lib.addClass(this.currentItem, this.options.hoverClass),
					  jQuery(this.currentItem).trigger("itemhover"));
		},
		clickHandler: function(e) {
			this.preventCurrentClick && e.preventDefault();
		},
		clickOutsideHandler: function(event) {
			var e = event.changedTouches ? event.changedTouches[0] : event;
			this.activeParent &&
				!this.isParent(this.menu, e.target) &&
				(this.hideActiveDropdown(), (this.touchFlag = !1));
		},
		isParent: function(parent, child) {
			for (; child.parentNode; ) {
				if (child.parentNode == parent) return !0;
				child = child.parentNode;
			}
			return !1;
		},
		isTouchPointerEvent: function(e) {
			return (
				e.type.indexOf("touch") > -1 ||
				(navigator.pointerEnabled && "touch" === e.pointerType) ||
				(navigator.msPointerEnabled &&
					e.pointerType == e.MSPOINTER_TYPE_TOUCH)
			);
		},
		isPointerDevice: (function() {
			return !(!navigator.pointerEnabled && !navigator.msPointerEnabled);
		})(),
		isTouchDevice: (function() {
			return !!(
				"ontouchstart" in window ||
				(window.DocumentTouch && document instanceof DocumentTouch)
			);
		})()
	}),
	(lib = {
		hasClass: function(el, cls) {
			return (
				!(!el || !el.className) &&
				el.className.match(new RegExp("(\\s|^)" + cls + "(\\s|$)"))
			);
		},
		addClass: function(el, cls) {
			el && !this.hasClass(el, cls) && (el.className += " " + cls);
		},
		removeClass: function(el, cls) {
			el &&
				this.hasClass(el, cls) &&
				(el.className = el.className.replace(
					new RegExp("(\\s|^)" + cls + "(\\s|$)"),
					" "
				));
		},
		extend: function(obj) {
			for (var i = 1; i < arguments.length; i++)
				for (var p in arguments[i])
					arguments[i].hasOwnProperty(p) &&
						(obj[p] = arguments[i][p]);
			return obj;
		},
		each: function(obj, callback) {
			var property, len;
			if ("number" == typeof obj.length)
				for (
					property = 0, len = obj.length;
					property < len &&
					callback.call(obj[property], property, obj[property]) !==
						!1;
					property++
				);
			else
				for (property in obj)
					if (
						obj.hasOwnProperty(property) &&
						callback.call(
							obj[property],
							property,
							obj[property]
						) === !1
					)
						break;
		},
		event: (function() {
			var fixEvent = function(e) {
				return (
					(e = e || window.event),
					e.isFixed
						? e
						: ((e.isFixed = !0),
						  e.target || (e.target = e.srcElement),
						  (e.preventDefault =
								e.preventDefault ||
								function() {
									this.returnValue = !1;
								}),
						  (e.stopPropagation =
								e.stopPropagation ||
								function() {
									this.cancelBubble = !0;
								}),
						  e)
				);
			};
			return {
				add: function(elem, event, handler) {
					elem.events ||
						((elem.events = {}),
						(elem.handle = function(e) {
							var ret,
								handlers = elem.events[e.type];
							e = fixEvent(e);
							for (var i = 0, len = handlers.length; i < len; i++)
								handlers[i] &&
									((ret = handlers[i].call(elem, e)),
									ret === !1 &&
										(e.preventDefault(),
										e.stopPropagation()));
						})),
						elem.events[event] ||
							((elem.events[event] = []),
							elem.addEventListener
								? elem.addEventListener(event, elem.handle, !1)
								: elem.attachEvent &&
								  elem.attachEvent("on" + event, elem.handle)),
						elem.events[event].push(handler);
				},
				remove: function(elem, event, handler) {
					for (
						var handlers = elem.events[event],
							i = handlers.length - 1;
						i >= 0;
						i--
					)
						handlers[i] === handler && handlers.splice(i, 1);
					handlers.length ||
						(delete elem.events[event],
						elem.removeEventListener
							? elem.removeEventListener(event, elem.handle, !1)
							: elem.detachEvent &&
							  elem.detachEvent("on" + event, elem.handle));
				}
			};
		})(),
		queryElementsBySelector: function(selector, scope) {
			if (((scope = scope || document), !selector)) return [];
			if (">*" === selector) return scope.children;
			if ("function" == typeof document.querySelectorAll)
				return scope.querySelectorAll(selector);
			for (
				var selectors = selector.split(","), resultList = [], s = 0;
				s < selectors.length;
				s++
			) {
				for (
					var currentContext = [scope || document],
						tokens = selectors[s]
							.replace(/^\s+/, "")
							.replace(/\s+$/, "")
							.split(" "),
						i = 0;
					i < tokens.length;
					i++
				)
					if (
						((token = tokens[i]
							.replace(/^\s+/, "")
							.replace(/\s+$/, "")),
						token.indexOf("#") > -1)
					) {
						var bits = token.split("#"),
							tagName = bits[0],
							id = bits[1],
							element = document.getElementById(id);
						if (
							element &&
							tagName &&
							element.nodeName.toLowerCase() != tagName
						)
							return [];
						currentContext = element ? [element] : [];
					} else if (token.indexOf(".") > -1) {
						for (
							var bits = token.split("."),
								tagName = bits[0] || "*",
								className = bits[1],
								found = [],
								foundCount = 0,
								h = 0;
							h < currentContext.length;
							h++
						) {
							var elements;
							elements =
								"*" == tagName
									? currentContext[h].getElementsByTagName(
											"*"
									  )
									: currentContext[h].getElementsByTagName(
											tagName
									  );
							for (var j = 0; j < elements.length; j++)
								found[foundCount++] = elements[j];
						}
						currentContext = [];
						for (
							var currentContextIndex = 0, k = 0;
							k < found.length;
							k++
						)
							found[k].className &&
								found[k].className.match(
									new RegExp(
										"(\\s|^)" + className + "(\\s|$)"
									)
								) &&
								(currentContext[currentContextIndex++] =
									found[k]);
					} else if (
						token.match(
							/^(\w*)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/
						)
					) {
						var tagName = RegExp.$1 || "*",
							attrName = RegExp.$2,
							attrOperator = RegExp.$3,
							attrValue = RegExp.$4;
						"for" == attrName.toLowerCase() &&
							this.browser.msie &&
							this.browser.version < 8 &&
							(attrName = "htmlFor");
						for (
							var found = [], foundCount = 0, h = 0;
							h < currentContext.length;
							h++
						) {
							var elements;
							elements =
								"*" == tagName
									? currentContext[h].getElementsByTagName(
											"*"
									  )
									: currentContext[h].getElementsByTagName(
											tagName
									  );
							for (var j = 0; elements[j]; j++)
								found[foundCount++] = elements[j];
						}
						currentContext = [];
						var checkFunction,
							currentContextIndex = 0;
						switch (attrOperator) {
							case "=":
								checkFunction = function(e) {
									return (
										e.getAttribute(attrName) == attrValue
									);
								};
								break;
							case "~":
								checkFunction = function(e) {
									return e
										.getAttribute(attrName)
										.match(
											new RegExp(
												"(\\s|^)" +
													attrValue +
													"(\\s|$)"
											)
										);
								};
								break;
							case "|":
								checkFunction = function(e) {
									return e
										.getAttribute(attrName)
										.match(
											new RegExp("^" + attrValue + "-?")
										);
								};
								break;
							case "^":
								checkFunction = function(e) {
									return (
										0 ==
										e
											.getAttribute(attrName)
											.indexOf(attrValue)
									);
								};
								break;
							case "$":
								checkFunction = function(e) {
									return (
										e
											.getAttribute(attrName)
											.lastIndexOf(attrValue) ==
										e.getAttribute(attrName).length -
											attrValue.length
									);
								};
								break;
							case "*":
								checkFunction = function(e) {
									return (
										e
											.getAttribute(attrName)
											.indexOf(attrValue) > -1
									);
								};
								break;
							default:
								checkFunction = function(e) {
									return e.getAttribute(attrName);
								};
						}
						currentContext = [];
						for (
							var currentContextIndex = 0, k = 0;
							k < found.length;
							k++
						)
							checkFunction(found[k]) &&
								(currentContext[currentContextIndex++] =
									found[k]);
					} else {
						tagName = token;
						for (
							var found = [], foundCount = 0, h = 0;
							h < currentContext.length;
							h++
						)
							for (
								var elements = currentContext[
										h
									].getElementsByTagName(tagName),
									j = 0;
								j < elements.length;
								j++
							)
								found[foundCount++] = elements[j];
						currentContext = found;
					}
				resultList = [].concat(resultList, currentContext);
			}
			return resultList;
		},
		trim: function(str) {
			return str.replace(/^\s+/, "").replace(/\s+$/, "");
		},
		bind: function(f, scope, forceArgs) {
			return function() {
				return f.apply(
					scope,
					"undefined" != typeof forceArgs ? [forceArgs] : arguments
				);
			};
		}
	});
//# sourceMappingURL=app.min.map
